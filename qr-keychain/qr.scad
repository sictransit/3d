// QR code data for "https://youtu.be/dQw4w9WgXcQ" (25 x 25)
// Generated by Altair's OpenSCAD QR Code Generator
// https://ridercz.github.io/OpenSCAD-QR/
qr_data = [[1,1,1,1,1,1,1,0,1,0,0,0,0,1,1,1,1,0,1,1,1,1,1,1,1],
           [1,0,0,0,0,0,1,0,1,0,0,1,1,1,0,0,1,0,1,0,0,0,0,0,1],
           [1,0,1,1,1,0,1,0,1,1,0,0,1,0,0,0,0,0,1,0,1,1,1,0,1],
           [1,0,1,1,1,0,1,0,1,1,1,0,0,0,1,0,1,0,1,0,1,1,1,0,1],
           [1,0,1,1,1,0,1,0,0,1,1,0,1,1,0,1,0,0,1,0,1,1,1,0,1],
           [1,0,0,0,0,0,1,0,1,1,1,0,0,1,1,0,1,0,1,0,0,0,0,0,1],
           [1,1,1,1,1,1,1,0,1,0,1,0,1,0,1,0,1,0,1,1,1,1,1,1,1],
           [0,0,0,0,0,0,0,0,0,0,1,1,0,0,1,1,0,0,0,0,0,0,0,0,0],
           [1,1,0,0,1,1,1,0,0,0,1,0,0,0,0,0,0,0,0,1,0,1,1,1,1],
           [0,1,1,1,1,0,0,0,1,0,0,0,0,1,0,1,1,0,0,0,1,1,0,1,0],
           [0,1,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,1,1,0,1,1,0,0],
           [0,0,1,0,1,1,0,0,0,1,0,0,0,0,1,0,1,0,1,0,1,0,1,1,0],
           [0,1,0,1,0,1,1,1,1,0,0,0,1,0,1,0,0,1,1,0,0,1,1,1,1],
           [1,1,0,0,1,0,0,1,1,1,1,1,0,1,0,1,1,1,0,0,1,0,0,1,0],
           [0,0,0,0,0,1,1,0,0,1,0,1,0,0,1,1,1,0,0,1,1,1,1,0,0],
           [0,0,1,1,0,1,0,0,1,1,1,1,0,0,0,0,0,0,0,1,1,0,1,1,0],
           [1,1,0,1,1,0,1,1,0,1,0,1,0,0,0,1,1,1,1,1,1,1,1,0,0],
           [0,0,0,0,0,0,0,0,1,1,1,0,0,1,0,0,1,0,0,0,1,0,0,0,0],
           [1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,0,1,0,1,0,1,0,0,0,0],
           [1,0,0,0,0,0,1,0,1,1,0,0,1,0,1,1,1,0,0,0,1,1,1,1,0],
           [1,0,1,1,1,0,1,0,1,1,0,0,1,0,1,0,1,1,1,1,1,1,1,1,0],
           [1,0,1,1,1,0,1,0,0,0,0,1,0,0,0,1,0,1,1,1,0,0,1,1,1],
           [1,0,1,1,1,0,1,0,0,1,1,1,1,0,0,0,1,0,1,0,0,1,0,1,0],
           [1,0,0,0,0,0,1,0,1,1,0,0,1,0,1,0,0,0,0,1,1,1,1,1,0],
           [1,1,1,1,1,1,1,0,1,0,1,0,0,1,0,1,0,0,1,0,0,0,1,1,1]];

// Render QR code with default settings (module 1x1x1)


$fn=60;
width=len(qr_data[0]);
layer=0.4;
qr_size=layer*6;
base_side=(width)*qr_size;

union(){

    qr_render(qr_data);
    
    ring();
    base(0,0, base_side, 3*layer);
    chain();
    

}

module emoji() {
    #translate([base_side/2,base_side/2,-layer*3])
    linear_extrude(height=layer) {    
        rotate([0,0,45])    
        resize([base_side/4,base_side/4,base_side/4])
        import("Emojione_BW_1F608.svg", center=true);
    }
}


module ring()
{
    translate([0,0,layer])
    
    difference(){
        base(layer,layer,base_side-2*layer,layer);               
        #base(2*layer,2*layer, base_side-4*layer,layer);
        }
    
    
    
    
}

module chain()
{
    difference(){
translate([-qr_size*1.5,qr_size*1.5+base_side,-3*layer])
    cylinder(h=3*layer,r=8);   
#translate([-qr_size*1.5,qr_size*1.5+base_side,-1.5])
    cylinder(h=2,r=3);   
    }
}
    

module base(dx, dy, l, h)
{       
    
    hull(){   
translate([dx,dy,-h])
    cylinder(h=h,r=2);
translate([dx+l,dy,-h])
    cylinder(h=h,r=2);
translate([dx+l,dy+l,-h])
    cylinder(h=h,r=2);
translate([dx+0,dy+l,-h])
    cylinder(h=h,r=2);
}
}


// QR code rendering method
module qr_render(data, module_size = qr_size, height = layer) {
    maxmod = len(data) - 1;
    union() {
        for(r = [0 : maxmod]) {
            for(c = [0 : maxmod]) {
                if(data[r][c] == 1){
                    xo = c * module_size;
                    yo = (maxmod - r) * module_size;
                    translate([xo, yo, 0]) cube([module_size, module_size, height]);
                }
            }
        }
    }
}